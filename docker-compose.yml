version: '3.8'

services:
  # Spring Boot Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: spring-angular-entra-backend
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - JWT_ISSUER_URI=${JWT_ISSUER_URI:-https://login.microsoftonline.com/common/v2.0}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-http://localhost:4200}
      - SPRING_DATASOURCE_URL=jdbc:h2:mem:testdb
      - SPRING_DATASOURCE_USERNAME=sa
      - SPRING_DATASOURCE_PASSWORD=password
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - app-network

  # Angular Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: spring-angular-entra-frontend
    ports:
      - "4200:80"
    environment:
      - MSAL_CLIENT_ID=${MSAL_CLIENT_ID:-your-client-id-here}
      - MSAL_TENANT_ID=${MSAL_TENANT_ID:-your-tenant-id-here}
      - API_BASE_URL=${API_BASE_URL:-http://backend:8080}
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - app-network

  # PostgreSQL Database (optional, for production)
  postgres:
    image: postgres:15-alpine
    container_name: spring-angular-entra-postgres
    environment:
      - POSTGRES_DB=spring_angular_entra
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infra/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network
    profiles:
      - production

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
